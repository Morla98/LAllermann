@page "/debug"
@rendermode InteractiveServer
@using System.Security.Claims
@inject IUserAuthenticationService UserAuthenticationService
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<PageTitle>Debug</PageTitle>

<h1>Hello, to the Debug Site!</h1>
<AuthorizeView>
	<Authorized >
		<p>This is a debug page that only logged in users can see.</p>
		<span>Logged in as <b>@name</b></span>
		<p>Your token is <b>@token</b></p>
		<p>Your RoleId is <b>@RoleId</b></p>
		<p>Your Nbf is <b>@nbf</b></p>
		<p>Your Exp is <b>@exp</b></p>
		<p>The current time is <b>@current_time</b></p>
		<p>You need to refresh in <b>@refresh_time</b> Minutes</p>
	</Authorized>
	<NotAuthorized>
		<p>You are not authorized to see this page.</p>
	</NotAuthorized>
</AuthorizeView>

<AuthorizeView Policy="Admin">
	<Authorized>
		<p>You are an admin</p>"
	</Authorized>
	<NotAuthorized>
		<p>You are not a admin</p>
		<AuthorizeView Policy="User">
			<Authorized Context="ABC">
				<p>But you are a user</p>
			</Authorized>
			<NotAuthorized Context="ABC">
				<p>And not even a user</p>
			</NotAuthorized>
		</AuthorizeView>
	</NotAuthorized>
</AuthorizeView>

<button type="button" class="btn btn-primary" @onclick="OnButtonPress">Debug</button>
@code {
	private string name = "Unknown";
	private string token = "Unknown";
	private string RoleId = "Unknown";
	private string nbf = "Unknown";
	private string exp = "Unknown";
	private string current_time = "";
	private string refresh_time = "0";
	protected override async Task OnInitializedAsync()
	{
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = state.User;
		name = user.FindFirst(ClaimTypes.Name)?.Value;
		RoleId = user.FindFirst(ClaimTypes.Role)?.Value;
		token = user.FindFirst("Token")?.Value;
		exp = user.FindFirst("exp")?.Value;
		nbf = user.FindFirst("nbf")?.Value;
		current_time = DateTime.UtcNow.ToString();
		if(exp != null)
		{
			DateTime expDateTime = DateTime.Parse(exp);
			refresh_time = (expDateTime - DateTime.UtcNow).TotalMinutes.ToString();

		}
	}

	private void OnButtonPress()
	{
		System.Diagnostics.Debug.WriteLine("Trying to refresh");
		NavigationManager.NavigateTo("/refresh", true);
	}
}
