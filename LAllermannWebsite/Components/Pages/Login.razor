@page "/login"
@using LAllermannWebsite.Models.ViewModels
@using System.Diagnostics
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject LAllermannWebsite.Services.Authentication.IAuthenticationService AuthenticationService

<h3>Login</h3>
<div class="row">
	<div class="col-md-4">
		<EditForm method="post" Model="@Model" OnValidSubmit="OnValidSubmit" FormName="LoginForm">
			
			<div class="form-group">
				<label for="Username">Username</label>
				<InputText id="Username" class="form-control" @bind-Value="Model.Username" />
				<ValidationMessage For="@(() => Model.Username)" />
			</div>
			<div class="form-group">
				<label for="Password">Password</label>
				<InputText id="Password" class="form-control" @bind-Value="Model.Password" />
				<ValidationMessage For="@(() => Model.Password)" />
			</div>
			<div class="mb-3 text-center">
				<span class="text-danger">@errorMessage</span>
			</div>
			<button type="submit" class="btn btn-primary">Login</button>
		</EditForm>
	</div>
</div>

@code {

	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm]
	public LoginViewModel Model { get; set; } = new();
	[Inject]
	protected NavigationManager NavigationManager { get; set; }
	private string? errorMessage = "";
	private async Task OnValidSubmit()
	{
		try
		{
			var principal = await AuthenticationService.GetClaimsPrincipalAsync(Model.Username, Model.Password);
			if (principal == null) throw new Exception("Something happend and principal is null");
			
			string? expiresUtcString = principal.FindFirst("exp")?.Value;
			if (expiresUtcString == null) throw new Exception("Token does not contain an expiration date or an error occured while passing");
			DateTime expiresUtc = DateTime.Parse(expiresUtcString);
			/* TODO authProperties like HTTPOnly, ExipireUTC, IsPersistent
			 * Currently not Authorinzg anymore if SignInAsync is called with authProperties
			 
			var authProperties = new AuthenticationProperties
			{
				IsPersistent = true,
				ExpiresUtc = expiresUtc
			};

			*/
			
			/*
			// Print all claims
			Debug.WriteLine("Principal:");
			foreach (var claim in principal.Claims)
			{
				Debug.WriteLine($"{claim.Type}: {claim.Value}");
			}
			*/
			
			
			await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			Debug.WriteLine(ex.Message);
			Debug.WriteLine(ex.StackTrace);
			return;
		}
		NavigationManager.NavigateTo("/secret");
	}
}
