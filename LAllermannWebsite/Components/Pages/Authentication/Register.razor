@page "/register"
@using LAllermannWebsite.Models.ViewModels
@using System.Diagnostics
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject IUserAuthenticationService UserAuthenticationService
@inject NavigationManager NavigationManager

<div class="row justify-content-center">
	<div class="col-md-4">
		<h3>Register</h3>
		<EditForm method="post" Model="@Model" OnValidSubmit="OnValidSubmit" FormName="RegisterForm">
			<div class="form-group">
				<label for="Username">Username</label>
				<InputText id="Username" class="form-control" @bind-Value="Model.Username" />
				<ValidationMessage For="@(() => Model.Username)" />
			</div>
			<div class="form-group">
				<label for="Password">Password</label>
				<InputText id="Password" type="password" class="form-control" @bind-Value="Model.Password" />
				<ValidationMessage For="@(() => Model.Password)" />
			</div>
			<div class="form-group">
				<label for="Confirm Password">Confirm Password</label>
				<InputText id="Confirm Password" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
				<ValidationMessage For="@(() => Model.ConfirmPassword)" />
			</div>
			<div class="form-group">
				<label for="Owner Key">Owner Key</label>
				<InputText id="Owner Key" type="password" class="form-control" @bind-Value="Model.OwnerKey" />
				<ValidationMessage For="@(() => Model.OwnerKey)" />
			</div>
			<div class="form-group">
				<label for="RoleId">RoleId</label>
				<InputText id="RoleId" class="form-control" @bind-Value="Model.RoleId" />
				<ValidationMessage For="@(() => Model.RoleId)" />
			</div>
			<div class="mb-3 text-center">
				<span class="text-danger">@errorMessage</span>
			</div>
			<button type="submit" class="btn btn-primary">Register</button>
		</EditForm>
	</div>
</div>

@code {

	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm]
	public RegisterViewModel Model { get; set; } = new();
	private string? errorMessage = "";
	private async Task OnValidSubmit()
	{
		if(Model.Password != Model.ConfirmPassword)
		{
			errorMessage = "Passwords do not match";
			return;
		}
		try
		{
			await UserAuthenticationService.RegisterAsync(Model.Username, Model.Password, Model.ConfirmPassword, Model.OwnerKey, Model.RoleId);
		}
		catch(Exception ex)
		{
			errorMessage = ex.Message;
			Debug.WriteLine(ex.Message);
			Debug.WriteLine(ex.StackTrace);
			return;
		}
		NavigationManager.NavigateTo("/login");
	}
}
