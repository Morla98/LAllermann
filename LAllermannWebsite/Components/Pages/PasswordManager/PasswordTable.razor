@using LAllermannShared.Models.Entities
@using System.Diagnostics
@using LAllermannWebsite.Services.ApiServices.PasswordManager
@inject PasswordManagerService passwordManagerService
@inject IJSRuntime JsRuntime
@if (passwords == null)
{
	<p>Loading...</p>
}
else if (show_edit_password)
{
	<EditPassword PasswordToEdit="to_edit_password" OnEditComplete="EditComplete"/>
}
else
{
	<div class="password_content">
		<div class="password_controls">

		</div>
		<div class="password_table">
			<table class="table">
				<thead>
					<tr>
						<th></th>
						<th>Title</th>
						<th>Notes</th>
						<th>Username</th>
						<th>Password</th>
						<th>URL</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var password in passwords)
					{
						<tr>
							<img path="/NONONONO" alt="Edit" @onclick="() => show_editPassword(password)" />
							<td>@password.Title</td>
							<td>@password.Notes</td>
							<td>@password.Username</td>
							<td>@password.UserPassword</td>
							<td>@password.URL</td>
							<img path="/NONONONO" alt="Delete" @onclick="() => deletePassword(password)"/>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}
@code {

	private List<Password>? passwords = null;
	private bool show_edit_password = false;
	private Password? to_edit_password;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			passwords = await passwordManagerService.GetPasswords();
			StateHasChanged();
		}
	}

	public async Task deletePassword(Password password)
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete " + password.Title + "?");
		if (confirmed)
		{
			await passwordManagerService.DeletePassword(password.Id);	
			passwords = await passwordManagerService.GetPasswords();
			StateHasChanged();
		}
	}

	public void show_editPassword(Password password)
	{
		to_edit_password = password;
		show_edit_password = true;
		StateHasChanged();
	}

	private void EditComplete(bool value)
	{
		show_edit_password = value;
		StateHasChanged();
	}

}
