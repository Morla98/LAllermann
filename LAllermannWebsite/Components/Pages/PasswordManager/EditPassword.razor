@using LAllermannShared.Models.Entities
@using LAllermannWebsite.Services.ApiServices.PasswordManager
@inject PasswordManagerService passwordManagerService
<h4>EditPassword</h4>

@if (PasswordToEditCopy == null)
{
	<p>No Password to Edit</p>
} 
else
{
	<div>
		<div>
			<label for="Title">Title</label>
			<InputText id="Title" @bind-Value="PasswordToEditCopy.Title" />
		</div>
		<div>
			<label for="Notes">Notes</label>
			<InputText id="Notes" @bind-Value="PasswordToEditCopy.Notes" />
		</div>
		<div>
			<label for="Username">Username</label>
			<InputText id="Username" @bind-Value="PasswordToEditCopy.Username" />
		</div>
		<div>
			<label for="UserPassword">Password</label>
			<InputText id="UserPassword" type="password" @bind-Value="PasswordToEditCopy.UserPassword" />
		</div>
		<div>
			<label for="URL">URL</label>
			<InputText id="URL" @bind-Value="PasswordToEditCopy.URL" />
		</div>
	</div>
	<button @onclick="ConfirmEdit">Confirm</button>
	<button @onclick="CancelEdit">Cancel</button>
}

<!--Debug Button-->
<button @onclick="DebugButton">Debug</button>
@code {
	[Parameter]
	public EventCallback<bool> OnEditComplete { get; set; }
	[Parameter]
	public Password? PasswordToEdit { get; set; }
	private Password? PasswordToEditCopy;

	protected override void OnInitialized()
	{
		if(PasswordToEdit != null)
		{
			PasswordToEditCopy = new Password()
				{
					Id = PasswordToEdit.Id,
					Title = PasswordToEdit.Title,
					Username = PasswordToEdit.Username,
					UserPassword = PasswordToEdit.UserPassword,
					URL = PasswordToEdit.URL,
					Notes = PasswordToEdit.Notes,
					UserId = PasswordToEdit.UserId
				};
		}
	}

	public async Task ConfirmEdit()
	{
		await passwordManagerService.EditPassword(PasswordToEditCopy);
		await OnEditComplete.InvokeAsync(false);
	}

	public void CancelEdit(){
		
		OnEditComplete.InvokeAsync(false);
	}

	public async Task DebugButton()
	{
		System.Diagnostics.Debug.WriteLine("Password Title: " + PasswordToEdit.Title);
		await OnEditComplete.InvokeAsync(false);
	}


	


}
